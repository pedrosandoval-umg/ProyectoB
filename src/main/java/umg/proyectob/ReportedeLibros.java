package umg.proyectob;

import javax.swing.table.DefaultTableModel;
import umg.proyectob.CompiladoVenta;
import umg.proyectob.DetalleVenta;
import umg.proyectob.LibroenInventario;
import java.util.List;
import java.time.format.DateTimeFormatter;
import javax.swing.JOptionPane;
import umg.proyectob.Proyectob;

/**
 *
 * @author pedros
 */
public class ReportedeLibros extends javax.swing.JFrame {

    /**
     * Creates new form ReportedeLibros
     */
    public ReportedeLibros() {
        initComponents();
        cargarReporteLibros();
    }

    private void cargarReporteLibros() {
        String[] columnas = {"Fecha", "Nombre del Libro", "Cantidad Vendida", "Precio por Unidad", "Total"};
        javax.swing.table.DefaultTableModel modelo = new javax.swing.table.DefaultTableModel(columnas, 0);

        for (CompiladoVenta venta : Proyectob.ventas) {
            String fecha = venta.getFecha().toString();

            for (DetalleVenta detalle : venta.getDetalles()) {
                Object[] fila = {
                    fecha,
                    detalle.getLibro().getTitulo(),
                    detalle.getCantidad(),
                    detalle.getLibro().getPrecio(),
                    detalle.getCantidad() * detalle.getLibro().getPrecio()
                };
                modelo.addRow(fila);
            }
        }

        tblReporteLibros.setModel(modelo);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblReporteLibros = new javax.swing.JTable();
        btnExport = new javax.swing.JButton();
        btnClose = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblReporteLibros.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(tblReporteLibros);

        btnExport.setText("Exportar");
        btnExport.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExportActionPerformed(evt);
            }
        });

        btnClose.setText("Regresar");
        btnClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCloseActionPerformed(evt);
            }
        });

        btnDelete.setText("Borrar");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 732, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnExport)
                        .addGap(251, 251, 251)
                        .addComponent(btnDelete)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnClose)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 315, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 45, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnExport)
                    .addComponent(btnClose)
                    .addComponent(btnDelete))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCloseActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCloseActionPerformed

    private void btnExportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExportActionPerformed
        // TODO add your handling code here:
        // Opciones de formato disponibles
        String[] formatos = {"CSV", "JSON", "XML"};

        // Diálogo para que el usuario elija el formato
        String seleccion = (String) JOptionPane.showInputDialog(
                this,
                "Seleccione el formato de exportación:",
                "Exportar Reporte",
                JOptionPane.PLAIN_MESSAGE,
                null,
                formatos,
                "CSV" // opción por defecto
        );

        // Si el usuario seleccionó una opción válida
        if (seleccion != null) {
            switch (seleccion) {
                case "CSV":
                    ExportadorReportes.exportarComoCSV(Proyectob.ventas);
                    break;
                case "JSON":
                    ExportadorReportes.exportarComoJSON(Proyectob.ventas);
                    break;
                case "XML":
                    ExportadorReportes.exportarComoXML(Proyectob.ventas);
                    break;
            }
        }
    }//GEN-LAST:event_btnExportActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        int filaSeleccionada = tblReporteLibros.getSelectedRow();
        if (filaSeleccionada == -1) {
            JOptionPane.showMessageDialog(this, "Selecciona un libro del reporte.");
            return;
        }

        int confirmacion = JOptionPane.showConfirmDialog(this, "¿Deseas eliminar la venta completa que contiene este libro?", "Confirmar eliminación", JOptionPane.YES_NO_OPTION);
        if (confirmacion != JOptionPane.YES_OPTION) {
            return;
        }

        // Obtener los datos de la fila
        String fecha = (String) tblReporteLibros.getValueAt(filaSeleccionada, 0);
        String titulo = (String) tblReporteLibros.getValueAt(filaSeleccionada, 1);

        // Buscar la venta que coincide con esa fecha y contiene ese libro
        CompiladoVenta ventaAEliminar = null;
        for (CompiladoVenta venta : Proyectob.ventas) {
            if (!venta.getFecha().toString().equals(fecha)) {
                continue;
            }

            for (DetalleVenta detalle : venta.getDetalles()) {
                if (detalle.getLibro().getTitulo().equalsIgnoreCase(titulo)) {
                    ventaAEliminar = venta;
                    break;
                }
            }

            if (ventaAEliminar != null) {
                break;
            }
        }

        if (ventaAEliminar != null) {
            Proyectob.ventas.remove(ventaAEliminar);
            PuntosExtra.guardarTodo();
            cargarReporteLibros();
            JOptionPane.showMessageDialog(this, "Venta eliminada del reporte.");
        } else {
            JOptionPane.showMessageDialog(this, "No se encontró la venta asociada.");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnClose;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnExport;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblReporteLibros;
    // End of variables declaration//GEN-END:variables
}
